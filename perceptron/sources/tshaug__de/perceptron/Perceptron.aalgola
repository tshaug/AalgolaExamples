namespace //tshaug.de/perceptron/

	¶import ///java/lang/System
¶import java:///java/lang/String as JavaString

import //tshaug.de/perceptron/math/FeatureVector4D
import //tshaug.de/perceptron/algorithm/PerceptronAlgo
import //tshaug.de/perceptron/util/IrisDataGenerator


⟦program⟧
object Perceptron ⁌
	This is a simple program to demonstrate the Perceptron implementation in 􊨖lgola
	Since 􊨖lgola is still in development some parts of the code is not structured as I would like it, 
	eg hardcorded test data, using 𝔽₆₄ instead of ℕ₃₂ is some places 
	
	It uses the parts of the Iris flower data set for classification using the Perceptron 
	https://en.wikipedia.org/wiki/Perceptron
	https://en.wikipedia.org/wiki/Iris_flower_data_set
⁍ is

	⟦override⟧
	method run() → () ⁌
		Hey ho, let's go
	 ⁍ is
		 epochs :← 3
		 runPerceptron(0.1, epochs) 
		 debugWriteLine("AI with 􊨖lgola (Aalgola) finished")
		 
	end method
	
	method runPerceptron(learningRate : 𝔽₆₄, epochs : ℕ₃₂) → () is
		
		dataGenerator :← IrisDataGenerator()
		¶ prepare training data
		training_inputs :← dataGenerator.irisTrainingData()	
		labels :← dataGenerator.irisTrainingLabels()
		
		debugWriteLine("Start Training…")
		perceptron :← PerceptronAlgo(0.1)
		weights :← FeatureVector4D(0.0, 0.0, 0.0, 0.0)
		debugWriteLine("Start training!")
		¶ at the mopment it is not possible to get the element count in a way so that we can use it…
		perceptron.train(training_inputs, labels, 80, epochs)
		
		debugWriteLine("Training finished!")	
		
		test1 : 𝔽₆₄ ← perceptron.predict(FeatureVector4D(5.1, 3.5, 1.4, 0.2))
		debugWrite("Iris setosa Test  (expected 0.0): ")
		debugWriteLine(test1)
		
		¶ Test: Iris versicolor
		test2 :← perceptron.predict(FeatureVector4D(5.5, 2.3, 4.0, 1.3))
		debugWrite("Iris versicolor Test  (expected 1.0): ")
		debugWriteLine(test2)
		
		
		testInputs :← dataGenerator.irisTestData()
		testLabels :← dataGenerator.irisTestLabels()
		
		¶ check test flowers
		debugWriteLine("Checking Test data:")
		for i ∈ ⟨1, …, 20⟩ do
			testInput : FeatureVector4D ← testInputs[i]
			testLabel :← testLabels[i]
			debugWrite("Expected  = ")
			debugWrite(testLabel)
			debugWrite(",    Result  = ")
			debugWriteLine(perceptron.predict(testInput))	
		end
end
		
		
		
		
function arrayOf(x₁ : 𝔽₆₄, x₂ : 𝔽₆₄, x₃ : 𝔽₆₄, x₄ : 𝔽₆₄, dummy : 𝔽₆₄) → MemorySegment⟦𝔽₆₄⟧ is
		m :← MemorySegment⟦𝔽₆₄⟧(5, 0.0)
		m[0] ← x₁
		m[1] ← x₂
		m[2] ← x₃
		m[3] ← x₄
		m[4] ← dummy								 
		return m
	end
		
end object